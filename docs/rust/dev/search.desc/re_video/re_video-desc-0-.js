searchState.loadedDescShard("re_video", 0, "Video decoding library.\nA value in time units.\nThe number of time units per second.\nReturns information about this crate\nVideo frame decoding.\nVideo demultiplexing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInterface for an asynchronous video decoder.\nMay use hardware acceleration if available and compatible …\nOne chunk of encoded video data, representing a single …\nHow the video should be decoded.\nContains the error value\nOne decoded video frame.\nData for a decoded frame on native targets.\nMeta information about a decoded video frame, as reported …\nInterpret YUV as GBR.\nContains the success value\nPixel format/layout used by <code>FrameContent::data</code>.\nShould use a hardware decoder.\nShould use a software decoder even if hardware …\nYuv matrix coefficients used by <code>PixelFormat::Yuv</code>.\nPixel layout used by <code>PixelFormat::Yuv</code>.\nYuv value range used by <code>PixelFormat::Yuv</code>.\nAV1 support.\nDecode timestamp of this sample. Chunks are expected to be …\nHow long the frame is valid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe start of a new <code>crate::demux::GroupOfPictures</code>?\nThe decode timestamp of the last chunk that was needed to …\nCreates a new async decoder for the given <code>video</code> data.\nPresentation timestamp range in which this frame is valid.\nPresentation timestamp for the sample in this chunk. Often …\nThe presentation timestamp of the frame.\nResets the decoder.\nSubmits a chunk for decoding in the background.\nDownload URL for the latest version of <code>FFmpeg</code> on the …\nRuns a <code>SyncDecoder</code> in a background thread, for …\nBlocking decoder of video chunks.\nWhere the decoding happens\nCommands sent to the decoder thread.\nInstant communication to the decoder thread (circumventing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncremented on each call to <code>AsyncDecoder::reset</code>. …\nClear and reset everything\nResets the decoder.\nSet when it is time to die\nSubmit some work and read the results.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the number of new frames.\nClear and reset everything\nSend video data to <code>ffmpeg</code> over CLI to decode it.\nDecode H.264 video via ffmpeg over CLI\nffmpeg does not tell us the timestamp/duration of a given …\nWraps an stdin with a shared shutdown boolean.\nFor sending chunks to the ffmpeg write thread.\nFor sending frame timestamps to the ffmpeg listener thread.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn output instance used by the threads.\nStrips out buffer addresses from <code>FFmpeg</code> log messages so …\nIgnore some common output from ffmpeg.\nIf true, the write thread will not report errors. Used …\nDownload URL for the latest version of <code>FFmpeg</code> on the …\nSignals the end of a NAL unit.\nCoded slice data partition A\nCoded slice data partition B\nCoded slice data partition C\nCoded slice of a non-IDR picture\nCoded slice of an IDR picture\nIn Annex-B before every NAL unit is a nal start code.\nHeader of the “Network Abstraction Layer” unit that is …\nPossible values for <code>nal_unit_type</code> field in <code>nal_unit</code>.\nHeader type not listed here.\nPicture parameter set\nSequence parameter set\nSupplemental enhancement information (SEI)\nUnspecified\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRef idc is a value from 0-3 that tells us how “important…\nSequence Parameter Set for h264 video\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a sequence parameter set from an AVC configuration …\nReturn the pixel layout specified in the SPS.\nReads a sequence of bits in exponential golomb coding See …\nParses a sequence parameter set from a buffer.\nConfiguration of a video.\nA Group of Pictures (GOP) always starts with an I-frame, …\nA single sample in a video.\nMeta informationa about the video samples.\nNot used in <code>re_video</code> itself, but useful for media type …\nDecoded video data.\nErrors that can occur when loading a video.\nSubsampling in both X and Y.\nSubsampling in X only.\nNo subsampling.\nPer color component bit depth.\nLength of sample starting at <code>Sample::byte_offset</code>.\nOffset into the video data.\nNatural height of the video.\nNatural width of the video.\nDecode timestamp of the first sample in this GOP, in time …\nThe GOP’s <code>sample_range</code> mapped to <code>usize</code> for slicing.\nTime at which this sample appears in the decoded …\nCodec-specific configuration.\nNatural width and height of the video\nWhether all decode timestamps are equal to presentation …\nLength of the video.\nDuration of the video, in time units.\nDuration of the sample, in time units.\nDetermines the video timestamps of all frames inside a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the sample from the video data.\nFor a given decode (!) timestamp, return the index of the …\nFor a given presentation timestamp, return the index of …\nWe split video into GOPs, each beginning with a key frame, …\nIf <code>dts_always_equal_pts</code> is false, then this gives for each …\nNatural height of the video.\nThe codec used to encode the video.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns None if the mp4 doesn’t specify whether the …\nIs t his the start of a new <code>GroupOfPictures</code>?\nReturns the index of:\nFor a given decode (!) timestamp, returns the index of the …\nFor a given presentation timestamp, return the index of …\nSee <code>Self::latest_sample_index_at_presentation_timestamp</code>, …\nLoads a video from the given data.\nThe smallest presentation timestamp observed in this video.\nAll the tracks in the mp4; not just the video track.\nThe number of samples in the video.\nTime at which this sample appears in the frame stream, in …\nRange of samples contained in this GOP.\nSamples contain the byte offsets into <code>data</code> for each frame.\nMeta information about the samples.\nContains info about the codec, bit depth, etc.\nReturns the subsampling mode of the video.\nHow many time units are there per second.\nNatural width of the video.\nA value in time units.\nThe number of time units per second.\nConvert to a duration\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>time_base</code> specifies the\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new value in <em>time units</em>.")