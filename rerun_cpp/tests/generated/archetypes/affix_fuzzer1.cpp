// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#include "affix_fuzzer1.hpp"

#include <rerun/collection_adapter_builtins.hpp>

namespace rerun::archetypes {}

namespace rerun {

    Result<std::vector<ComponentBatch>> AsComponents<archetypes::AffixFuzzer1>::serialize(
        const archetypes::AffixFuzzer1& archetype
    ) {
        using namespace archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(23);

        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1001,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1001"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1002,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1002"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1003,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1003"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1004,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1004"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1005,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1005"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1006,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1006"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1007,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1007"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1008,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1008"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1009,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1009"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1010,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1010"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1011,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1011"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1012,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1012"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1013,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1013"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1014,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1014"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1015,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1015"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1016,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1016"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1017,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1017"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1018,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1018"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1019,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1019"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1020,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1020"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1021,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1021"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto result = ComponentBatch::from_loggable(
                archetype.fuzz1022,
                "rerun.testing.archetypes.AffixFuzzer1",
                "fuzz1022"
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto indicator = AffixFuzzer1::IndicatorComponent();
            auto result =
                ComponentBatch::from_loggable(indicator, "rerun.testing.archetypes.AffixFuzzer1");
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
